(base) kyu@kyu-Satellite-C55-C:~/Desktop/TYCS/self-study$ cat typescript
Script started on 2021-01-31 09:49:27-06:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="121" LINES="51"]
(base) kyu@kyu-Satellite-C55-C:~/Desktop/TYCS/self-study$ 486
486: command not found
(base) kyu@kyu-Satellite-C55-C:~/Desktop/TYCS/self-study$ racket
Welcome to Racket v7.2.
> 486
486
> (+ 137 349)
486
> (- 1000 334)
666
> (- 334 1000)
-666
> (* 5 99)
495
> (/ 10 5)
2
> (/ 5 10)
1/2
> (/ 3 9)
1/3
> (+ 2.7 10)
12.7
> (+ 21 35 12 7)
75
> (* 25 4 12)
1200
> (+ (* 3 5) (- 10 6))
19
> (+ (* 3 (+ (* 2 4) (+ 3 5))) (+ (- 10 7) 6))
57
> (* 3 16)
48
> (+ 48 9)
57
> (define size 2)
> size
2
> (* 5 size)
10
> (define pi 3.14159)
> (define radius 10)
> (* pi (* radius radius))
314.159
> (define circumference (* 2 pi radius))
> circumference
62.8318
> (define (square x) (* x x))
> (square 21)
441
> (square (+ 2 5))
49
> (square (square 3))
81
> (+ (square 2) (square 3))
13
> (define (sum-of-squares x y) 
  (+ (square x) (square y)))
> (sum-of-squares 2 3)
13
> (define (f a)
  (sum-of-squares (+a 1) (*a 2)))
> (f 5)
; +a: undefined;
;  cannot reference an identifier before its definition
;   in module: top-level
; [,bt for context]
> (define (f a)
  (sum-of-squares (+ a 1) (* a 2)))
> (f 5)
136
> (+ (square 6) (square 10))
136
> f
#<procedure:f>
> (define (abs x)
  (cond ((> x 0) x)
        ((= x 0) 0)
        ((< x 0) (-x))))
> (abs 1)
1
> (abs 0)
0
> (abs -1)
; -x: undefined;
;  cannot reference an identifier before its definition
;   in module: top-level
; [,bt for context]
> (abs (-1))
; application: not a procedure;
;  expected a procedure that can be applied to arguments
;   given: -1
; [,bt for context]
> (abs (- 1))
; -x: undefined;
;  cannot reference an identifier before its definition
;   in module: top-level
; [,bt for context]
> (abs (- 0 1))
; -x: undefined;
;  cannot reference an identifier before its definition
;   in module: top-level
; [,bt for context]
> (define (abs x)
  (cond ((> x 0) x)
        ((= x 0) 0)
        ((< x 0) (- x))))
> (abs -1)
1
> (define (abs x)
  (cond ((< x 0) (- x))
        (else x)))
> (abs 1)
1
> (abs 0)
0
> (abs -1)
1
> (define (abs x)
    (if (< x 0)
        (- x)
        (x))
  )
> abs 1
#<procedure:abs>
1
> (abs 1)
; application: not a procedure;
;  expected a procedure that can be applied to arguments
;   given: 1
; [,bt for context]
> (define (abs x)
    (if (< x 0)
        (- x)
        x))
> abs 1
#<procedure:abs>
1
> (abs 1)
1
> (and (> x 5) (< x 10))
; x: undefined;
;  cannot reference an identifier before its definition
;   in module: top-level
; [,bt for context]
> (define x 5)
> (and (> x 5) (< x 10))
#f
> (define x 6)
> (and (> x 5) (< x 10))
#t
> (define (>= x y)
   (or (> x y) (= x y)))
> (>= 1 2)
#f
> (>= 3 2)
#t
> (define (>= x y)
    (not (< x y)))
> (>= 1 2)
#f
> (>= 3 2)
#t
> 10
10
> (+ 5 3 4)
12
> (- 9 1)
8
> (/ 6 2)
3
> (+ (* 2 4) (- 4 6))
6
> (define a 3)
> (define b (+ a 1))
> (+ a b (* a b))
19
> a
3
> b
4
> (= a b)
#f
> (if (and (> b a) (< b (* a b)))
      b
      a)
4
> (cond ((= a 4) 6)
        ((= b 4) (+ 6 7 a))
        (else 25))
16
> (+ 2 (if (> b a) b a))
6
> (* (cond ((> a b) a)
           ((< a b) b)
           (else -1))
     (+ a 1))
16
> (/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5))))
  )
  (* 3 (- 6 2) (- 2 7)))
-37/150
> (define (two-out-of-three a b c)
  (cond ((and (=< a b) (=< a c)) (sum-of-squares b c)
        ((and (=< b a) (=< b c)) (sum-of-squares a c))
  )
  )
  )
> (define (sum-of-squares a b)
    (+ (* a a) (* b b)))
> (sum-of-squares 1 2)
5
> (two-out-of-three 1 2 3)
; =<: undefined;
;  cannot reference an identifier before its definition
;   in module: top-level
; [,bt for context]
> (define (=< a b)
    (not > a b))
> (two-out-of-three 1 2 3)
; not: arity mismatch;
;  the expected number of arguments does not match the given number
;   expected: 1
;   given: 3
; [,bt for context]
> (define (two-out-of-three a b c)
   (+ a b c))
> (two-out-of-three 1 2 3)
6
> (define (two-out-of-three a b c)
  (cond ((and (=< a b) (=< a c)) (sum-of-squares b c)
        ((and (=< b a) (=< b c)) (sum-of-squares a c))
  )
  )
  )
> (two-out-of-three 1 2 3)
; not: arity mismatch;
;  the expected number of arguments does not match the given number
;   expected: 1
;   given: 3
; [,bt for context]
> (=< 1 2)
; not: arity mismatch;
;  the expected number of arguments does not match the given number
;   expected: 1
;   given: 3
; [,bt for context]
> (<=)
; <=: arity mismatch;
;  the expected number of arguments does not match the given number
;   expected: at least 1
;   given: 0
; [,bt for context]
> <=
#<procedure:<=>
> (define (=< a b)
   (not (> a b))
  )
> (two-out-of-three 1 2 3)
; application: not a procedure;
;  expected a procedure that can be applied to arguments
;   given: #f
; [,bt for context]
> (and (<= 1 2) (<= 2 3))
#t
> (and (=< 1 2) (=< 2 3))
#t
> (cond ((and (=< 1 2) (=< 2 3)) (sum-of-squares 1 2)))
5
> (defi(base)
