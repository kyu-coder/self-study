1.2 Procedures and the processes they generate

We have now considered the elements of programming: we have used primitive arithmetic operations, we have combined these operations, and we have abstracted these composite operations by defining them as compound procedures.
However, our situation is analogous to that of someone who has learned the rules for how the pieces move in chess but knows nothing of typical openings, tactics, or strategy.

1.2.1 Linear recursion and iteration

(define (factorial n)
  (if (= n 1)
      1
      (* n (factorial (- n 1)))))
      
The expansion occurs as the process builds up a chain of deferred operations (a chain of multiplications). This type of process, characterized by a chain of deferred operations, is called a recursive process. Carrying out this process requires that the interpreter keep track of the operations to be performed later on.
In the computation of n!, the length of the chain of deferred multiplications, and hence the amount of information needed to keep track of it, grows linearly with n (is proportional to n), just like the number of steps. Such a process is called a linear recursive process.

(define (factorial n)
  (fact-iter 1 1 n))

(define (fact-iter product counter max-count)
  (if (> counter max-count)
      product
      (fact-iter (* counter product)
                 (+ counter 1)
                 max-count)))
                 
By contrast, the second process does not grow and shrink. At each step, all we need to keep track of, for any n, are the current values of the variables product, counter, and max-count. We call this an iterative process.
In general, an iterative process is one whose state can be summarized by a fixed number of state variables, together with a fixed rule that describes how the state variables should be updated as the process moves from state to state and an (optional) end test that specifies conditions under which the process should terminate. 
In computing n!, the number of steps required grows linearly with n. Such a process is called a linear iterative process.



When we describe a procedure as recursive:
	we are referring to the syntactic fact that the procedure definition refers to the procedure itself.

When we describe a process as following a pattern that is, say, linearly recursive:
	we are speaking about how the process evolves, not about the syntax of how a procedure is written.
	
	fact-iter is an iterative process - its state is captured completely by its three state variables, and 		an interpreter need keep track of only three variables in order to execute the process.
	

